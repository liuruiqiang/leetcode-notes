给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。

思路：用一个变量保存遍历过的数中的最小值，相当于遍历过的数中买股票的最佳时机，然后计算当前股票与最小值之差，找到这个差值的最大值即找到了最佳卖股票实际。
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int res=0,buy=INT_MAX;
        for(int price:prices){
            buy=min(price,buy);
            res=max(res,price-buy);
        }
        return res;
    }
};
