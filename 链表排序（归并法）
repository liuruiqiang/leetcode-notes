在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

示例 1:

输入: 4->2->1->3
输出: 1->2->3->4
示例 2:

输入: -1->5->3->4->0
输出: -1->0->3->4->5

思路：考虑归并排序法，把链表分成两半进行递归，利用快慢指针，快指针一次两步，则快指针到连尾部的时候慢指针就在中部，可以分为两部分了，
最后形成两半有序链表再进行有序表的合并，注意在这个代码中，
两半递归最后递归到两个节点是通过Merge操作就可以合为有序的双节点链表，再继续这样合并就合并为有序表了
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head||!head->next)return head;
        ListNode *slow=head,*fast=head,*pre=head;
        while(fast&&fast->next){
            pre=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        pre->next=NULL;
        return merge(sortList(head),sortList(slow));
    }
    ListNode* merge(ListNode* l1,ListNode* l2){
        ListNode* dummy=new ListNode(-1);
        ListNode* cur=dummy;
        while(l1&&l2){
            if(l1->val<l2->val){
                cur->next=l1;
                l1=l1->next;
            }
            else{
                cur->next=l2;
                l2=l2->next;
            }
            cur=cur->next;
        }
        if(l1)cur->next=l1;
        if(l2)cur->next=l2;
        return dummy->next;
    }
};
