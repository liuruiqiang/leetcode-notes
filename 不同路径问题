一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？

示例 1:

输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右

思路一：将网格当做一个mxn的矩阵，dp[i][j]表示到当前位置的路径数量，则dp[i][j] = dp[i - 1][j] + dp[i][j - 1],为了节省空间这里直接用一维数组
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> dp(n,1);
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[j]+=dp[j-1];
            }
        }
        return dp[n-1];
    }
};
这里要理解一维数组的含义，有m行，每一行都对数组进行刷新，这是因为比如第一行刷新完了，这个时候第二行的dp[1][j]数值就需要加上它头顶的数值和左边的数值，而头顶dp[0][j]的数
值又是刚才加上头顶的左方dp[0][j-1]数值得到的，dp[1][j]=dp[1][j-1]+dp[0][j],而dp[0][j]又等于dp[0][j-1]+1,相当于是在第一行的刷新，所以这个时候就相当于
用一维数组dp直接再进行一行的刷新，m行就刷新m次。
思路二：数学思维
组合思维，总共走了m+n-2步，往下走了m-1，往右走了n-1，所以只需要在m+n-2中选m-1和n-1中娇小的那个数
class Solution {
public:
    int uniquePaths(int m, int n) {
        double num = 1, denom = 1;
        int small = m > n ? n : m;
        for (int i = 1; i <= small - 1; ++i) {
            num *= m + n - 1 - i;
            denom *= i;
        }
        return (int)(num / denom);
    }
};

