给定一个二叉树，找出其最大深度。

二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。

说明: 叶子节点是指没有子节点的节点。

示例：
给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

思路一：直接递归最简单不过
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)return 0;
        if(root->left==NULL&&root->right==NULL)return 1;
        else if(root->left==NULL){
            return 1+maxDepth(root->right);
        }
        if(root->right==NULL){
            return 1+maxDepth(root->left);
        }
        else{
        return 1+max(maxDepth(root->left),maxDepth(root->right));
        }
    }
};
思路二：使用队列，每次遍历一层，把该层的节点放入队列中，高度加一，然后下次依次遍历该层数据，每个节点遍历完就删去该节点同时将该节点的子节点放入队列中，这样
下次遍历的就只有下一层的节点了
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if (!root) return 0;
        int res = 0;
        queue<TreeNode*> q{{root}};
        while (!q.empty()) {
            ++res;
            for (int i = q.size(); i > 0; --i) {
                TreeNode *t = q.front(); q.pop();
                if (t->left) q.push(t->left);
                if (t->right) q.push(t->right);
            }
        }
        return res;
    }
};
