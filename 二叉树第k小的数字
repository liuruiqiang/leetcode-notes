给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。

说明：
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 3

思路：直接根据中序遍历结果，第k个数字即为所求，递归遍历和栈遍历都尝试了
递归法：
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        return kthSmallestDFS(root, k);
    }
    int kthSmallestDFS(TreeNode* root, int &k) {
        if (!root) return -1;
        int val = kthSmallestDFS(root->left, k);
        if (k == 0) return val;
        if (--k == 0) return root->val;
        return kthSmallestDFS(root->right, k);
    }
};
用栈：
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int cnt=0;
        stack<TreeNode*> st; 
        TreeNode* p=root;
        st.push(p);
        while(!st.empty()){
            TreeNode* n=st.top();
            while(n){
                st.push(n->left);
                n=n->left;
            }
            if(!n){
                st.pop();
            }
             n=st.top();
            if(++cnt==k)return n->val;
            st.pop();
            if(n->right)st.push(n->right);
            else{
                st.push(NULL);
            }
        }
        return 0;
    }
}
还有一种分治法，思路：如果左分支的个数小于k，这说明目标在左分支中，如果大于k，则说明目标在右分支中，否则目标就是头结点,注意左边个数为k时不能直接返回左节点，因为左节点不一定是目标值有可能左节点有右分支
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int cnt=count(root->left);
        if(cnt>=k)return kthSmallest(root->left,k);
        if(cnt<k-1)return kthSmallest(root->right,k-cnt-1);
  
        return root->val;
    }
    int count(TreeNode* root){
        if(!root)return 0;
        return 1+count(root->left)+count(root->right);
    }
};
