给定一个非空二叉树，返回其最大路径和。

本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。

示例 1:

输入: [1,2,3]

       1
      / \
     2   3

输出: 6
示例 2:

输入: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

输出: 42

题目理解，这道题目很容易理解错，很容易想当然的认为是从上往下的路径，其实也可以是从下往上的路径，比如上面这条路径的15-20-7也可以是一条路经，
思路：肯定是需要用递归，从根节点递归，全局路径最大值需要随时更新，所以放在参数指针res中，同时每次递归也需要返回值以返回左子树和右子树的最大值，
如果left+right+当前节点值大于参数res就更新参数res，其中，left和right是递归获得的，递归返回值返回的是当前值加上左子树与柚子树的最大值，而不是三者相加，
不然就再到根节点时就不再是一条路经了
class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int res = INT_MIN;
        helper(root, res);
        return res;
    }
    int helper(TreeNode* node, int& res) {
        if (!node) return 0;
        int left = max(helper(node->left, res), 0);
        int right = max(helper(node->right, res), 0);
        res = max(res, left + right + node->val);
        return max(left, right) + node->val;
    }
};
