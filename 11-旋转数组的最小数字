题目描述：
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。
输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。
例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。
NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。

解法：
我们可以找到数组中间的元素。如果中间元素位于前面的递增子数组，那么它应该大于或者等于第一个指针指向的元素。此时最小元素应该位于该中间元素之后，
然后我们把第一个指针指向该中间元素，移动之后第一个指针仍然位于前面的递增子数组中。
同样，如果中间元素位于后面的递增子数组，那么它应该小于或者等于第二个指针指向的元素。此时最小元素应该位于该中间元素之前，
然后我们把第二个指针指向该中间元素，移动之后第二个指针仍然位于后面的递增子数组中。
第一个指针总是指向前面递增数组的元素，第二个指针总是指向后面递增数组的元素。最终它们会指向两个相邻的元素，
而第二个指针指向的刚好是最小的元素，这就是循环结束的条件。
代码：
class Solution {
public:
    int minNumberInRotateArray(vector<int> rotateArray) {
        int len=rotateArray.size();
        if(len==0){
            return 0;
        }
        int left=0;
        int right=len-1;
        int mid=0;
        while(rotateArray[left]>=rotateArray[right]){
            if((right-left)==1){
                mid=right;
                break;
            }
            int mid=left+(right-left)/2;
            if(rotateArray[right]==rotateArray[left]&&rotateArray[mid]==rotateArray[right]){
                return MinInOrder(rotateArray,left,right);
            }
            if(rotateArray[mid]>=rotateArray[left]){
                left=mid;
            }else{
                right=mid;
            }
        }
        return rotateArray[mid];
    }
private:
    int MinInOrder(vector<int> &num,int left,int right){
        int result=num[left];
        for(int i=left;i<right;i++){
            if(num[i]<result){
                result=num[i];
            }
        }
        return result;
    }
};
