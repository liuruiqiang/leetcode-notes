给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。

说明：不允许修改给定的链表。

 

示例 1：

输入：head = [3,2,0,-4], pos = 1
输出：tail connects to node index 1
解释：链表中有一个环，其尾部连接到第二个节点。


示例 2：

思路：
首先设置快慢指针，快指针一次前进两步，则如果有环，总会有相遇的时候，由于快指针走的路是慢指针的两倍，且快指针比慢指针多走一个圈，所以慢指针走的路就是
一个圈的大小，所以慢指针走的路减去环起点至相遇点的距离就等于圈大小减去环起点至相遇点的距离，
这个时候再设置慢指针为head，与快指针以相同速度前进，则相遇点即为环起点，因为此时两个指针走的路的大小都是前面提到的环起点至第一次相遇点的距离
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode *slow=head,*fast=head;
        while(fast&&fast->next){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast)break;
        }
        int len=0;
        if(fast==NULL||!fast->next)return -1;
        
        slow=head;
        int pos=0;
        while(slow!=fast){
            slow=slow->next;
            fast=fast->next;
            pos++;
        }
        
        return pos;
    }
};
