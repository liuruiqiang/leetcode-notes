给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。

说明：解集不能包含重复的子集。

示例:

输入: nums = [1,2,3]
输出:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

思路：这个问题很容易想到最简单的递归，最开始容易想到的递归都会导致有重复子集的出现，正确递归思路是：
首先对数组排序，从空集开始，依次从0到最后一个数字进行遍历，每次往vector中加入当前数字，然后再往该数字后面进行递归，即在存在当前数字的基础上找出所有的子集，
递归完之后再把当前数字移除，再从下一个数字开始循环，即在没有当前数字的基础上进行递归。这样就避免了重复的子集。
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> out;
        sort(nums.begin(), nums.end());
        push(res,nums,out,0);
        return res;
    }
    void push(vector<vector<int>>& res,vector<int>& nums,vector<int> &out,int pos){
        res.push_back(out);
        for(int i=pos;i<nums.size();i++){
            out.push_back(nums[i]);
            push(res,nums,out,i+1);
            out.pop_back();
        }
    }
};
思路二：首先是空集，然后往复制一个[]往其中中加入1变为[],[1],再复制[]往其中加入[2]，复制[1]王其中加入[1,2]变为[],[1],[2],[1,2].......
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res(1);
        vector<int> out;
        sort(nums.begin(), nums.end());
        for(int i=0;i<nums.size();i++){
            int size=res.size();
            for(int j=0;j<size;j++){
                res.push_back(res[j]);
                res.back().push_back(nums[i]);
            }
        }
        
        return res;
    }
    
};
