给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]



 

示例 1:

输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
输出: 6 
解释: 节点 2 和节点 8 的最近公共祖先是 6。
示例 2:

输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
输出: 2
解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。

思路：由于是中序二叉搜索树，所以，左子树数字小于根节点小于右子树数字，如果根节点小于p、q的最小值，则说明公共祖先在右子树，往右子树递归，如果根节点大于p、q
的最大值，这说明目标节点在左子树，往左子树递归，否则根节点即为公共祖先。
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root->val<min(p->val,q->val))return lowestCommonAncestor(root->right,p,q);
        if(root->val>max(p->val,q->val)) return lowestCommonAncestor(root->left,p,q);
        return root;
    }
};
