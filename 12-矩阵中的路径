题目描述：
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。
解法：
当矩阵坐标为（row，col）的格子和路径字符串中下标为pathLength的字符一样时，从4个相邻的格子（row，col-1）、（row-1，col）、（row，col+1）以及（row+1，col）中去定位路径字符串中下标为pathLength+1的字符。如果4个相邻的格子都没有匹配字符串中下标为pathLength+1的字符，表明当前路径字符串中下标为pathLength的字符在矩阵中的定位不正确，我们需要回到前一个字符串（pathLength-1），然后重新定位。一直重复这个过程，
直到路径字符串上所有字符都在矩阵中找到格式的位置（此时str[pathLength] == ‘\0’）。
代码：
class Solution {
public:
    bool hasPath(char* matrix, int rows, int cols, char* str)
    {
        if(matrix==NULL||rows<1||cols<1||str==NULL){
            return false;
        }
        bool* visited=new bool[rows*cols];
        memset(visited,0,rows*cols);
        int pathLength=0;
        for(int row=0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(hasPathCore(matrix,rows,cols,row,col,str,pathLength,visited)){
                    return true;
                }
            }
        }
        delete[] visited;
        return false;
    }

private:
    bool hasPathCore(char* matrix,int rows,int cols,int row,int col,char* str,int& pathLength,bool* visited){
        if(str[pathLength]=='\0'){
            return true;
        }
        bool hasPath=false;
        if(row>=0&&col>=0&&row<rows&&col<cols&&matrix[row*cols+col]==str[pathLength]&&(!visited[row*cols+col])){
            visited[row*cols+col]=true;
            pathLength++;
            hasPath=hasPathCore(matrix,rows,cols,row+1,col,str,pathLength,visited)
                ||hasPathCore(matrix,rows,cols,row-1,col,str,pathLength,visited)
                ||hasPathCore(matrix,rows,cols,row,col-1,str,pathLength,visited)
                ||hasPathCore(matrix,rows,cols,row,col+1,str,pathLength,visited);
            if(!hasPath){
                pathLength--;
                visited[row*cols+col]=false;
            }
        }
        return hasPath;
    }

};
