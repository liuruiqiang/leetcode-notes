给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]



 

示例 1:

输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。
示例 2:

输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出: 5
解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。

思路：首先找到递归退出条件，如果当前节点是p或者q或者null则返回当前节点，这说明当前节点可能是祖先，否则，则分别往左子树和右子树递归，如果左子树和右子树都能
找到结果，说明当前节点是公共祖先，如果左子树和右子树只有一个能找到结果，则那个结果就是公共祖先。
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root)return NULL;
        if(root==p||root==q){
            return root;
        }
        TreeNode *left=lowestCommonAncestor(root->left,p,q);
        TreeNode * right=lowestCommonAncestor(root->right,p,q);
        if(left&&right)return root;
        return left?left:right;
    }
    
};
注意：一开始我直接判断如果root的左右子树分别是p和q则把root当做祖先返回，这种情况忽略了1,2,3，null，4（找4和3的祖先）这类情况，所以应该直接从root与p或者q
比较
