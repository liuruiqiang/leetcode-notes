给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。

思路：能无限买卖的话当然低价买入高价卖出最好，所以每次低价买入如果后面遇到比他高的就可以卖出这个时候转的差价，如果卖出第二天价钱更高则还可以卖出当天再买入第二天
在卖出，这样，可以从第二天起遍历，如果比前一天高就加入差价，最后所有差价总和即为结果
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int res=0,n=prices.size();
        for(int i=0;i<n-1;i++){
            if(prices[i]<prices[i+1]){
                res+=prices[i+1]-prices[i];
            }
        }
        return res;
    }
};
